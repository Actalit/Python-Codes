import customtkinter as ctk
from tkinter import messagebox, simpledialog

worktime = 25 * 60
shortbreak = 5 * 60
longbreak = 15 * 60

class PomodoroTimer:
    def __init__(self):
        ctk.set_appearance_mode("dark")
        self.root = ctk.CTk()
        self.root.geometry("600x450")
        self.root.title("Pomodoro Timer")


        self.root.configure(bg="black")


        self.tabview = ctk.CTkTabview(self.root)
        self.tabview.pack(expand=True, fill="both", padx=20, pady=20)

        self.pomodoro_tab = self.tabview.add("Pomodoro Timer")
        self.settings_tab = self.tabview.add("Settings")

        self.setup_pomodoro_tab()

        self.setup_settings_tab()

        self.root.mainloop()

    def setup_pomodoro_tab(self):
        displays = ctk.CTkFrame(self.pomodoro_tab, width=500, height=75, corner_radius=40, bg_color='transparent', fg_color='gray')
        displays.pack(pady=25)

        self.title = ctk.CTkLabel(displays, text='Pomodoro Timer', font=("Sans", 50), text_color='white')
        self.title.pack(pady=30)

        self.timer_label = ctk.CTkLabel(displays, text='25:00', font=("Arial", 30), fg_color='white', corner_radius=2000, text_color='black', bg_color='transparent')
        self.timer_label.pack(pady=20)


        button_frame = ctk.CTkFrame(self.pomodoro_tab)
        button_frame.pack(pady=20)

        self.start_button = ctk.CTkButton(button_frame, text="Start", font=("Helvetica", 20), command=self.start_timer, fg_color='black', hover_color='gray')
        self.start_button.pack(side="left", padx=10)

        self.stop_button = ctk.CTkButton(button_frame, text="Stop", font=("Helvetica", 20), command=self.stop_timer, fg_color='black', hover_color='gray')
        self.stop_button.pack(side="left", padx=10)

        self.reset_button = ctk.CTkButton(button_frame, text="Reset", font=("Helvetica", 20), command=self.reset_timer, fg_color='black', hover_color='gray')
        self.reset_button.pack(side="left", padx=10)

        self.work_time, self.break_time = worktime, shortbreak
        self.is_work_time, self.pomodoros_completed, self.is_running = True, 0, False

    def setup_settings_tab(self):
        self.settings_label = ctk.CTkLabel(self.settings_tab, text="Settings", font=("Helvetica", 24), text_color='white')
        self.settings_label.pack(pady=20)

        self.set_work_time_button = ctk.CTkButton(self.settings_tab, text="Set Work Time", command=self.set_work_time, fg_color='black', hover_color='gray')
        self.set_work_time_button.pack(pady=10)

        self.set_short_break_button = ctk.CTkButton(self.settings_tab, text="Set Short Break Time", command=self.set_short_break_time, fg_color='black', hover_color='gray')
        self.set_short_break_button.pack(pady=10)

        self.set_long_break_button = ctk.CTkButton(self.settings_tab, text="Set Long Break Time", command=self.set_long_break_time, fg_color='black', hover_color='gray')
        self.set_long_break_button.pack(pady=10)

    def set_work_time(self):
        new_time = simpledialog.askinteger("Set Work Time", "Enter time in minutes (default is 25):", minvalue=1)
        if new_time:
            self.work_time = new_time * 60
            self.timer_label.configure(text="{:02d}:{:02d}".format(new_time, 0))

    def set_short_break_time(self):
        new_time = simpledialog.askinteger("Set Short Break Time", "Enter time in minutes (default is 5):", minvalue=1)
        if new_time:
            global shortbreak
            shortbreak = new_time * 60

    def set_long_break_time(self):
        new_time = simpledialog.askinteger("Set Long Break Time", "Enter time in minutes (default is 15):", minvalue=1)
        if new_time:
            global longbreak
            longbreak = new_time * 60

    # Functions
    def start_timer(self):
        self.start_button.configure(state="disabled")
        self.is_running = True
        self.update_timer()

    def stop_timer(self):
        self.start_button.configure(state="normal")
        self.stop_button.configure(state="normal")
        self.is_running = False

    def reset_timer(self):
        self.is_running = False
        self.is_work_time = True
        self.break_time = shortbreak
        self.work_time = worktime
        self.pomodoros_completed = 0
        self.timer_label.configure(text="25:00")
        self.start_button.configure(state="normal")
        self.stop_button.configure(state="normal")

    def update_timer(self):
        if self.is_running:
            if self.is_work_time:
                self.work_time -= 1
                if self.work_time == 0:
                    self.is_work_time = False
                    self.pomodoros_completed += 1
                    self.break_time = longbreak if self.pomodoros_completed % 4 == 0 else shortbreak
                    messagebox.showinfo("Well done!" if self.pomodoros_completed % 4 == 0 else "Keep going after this little break!", "Time's up!")

            else:
                self.break_time -= 1
                if self.break_time == 0:
                    self.is_work_time, self.work_time = True, worktime
                    messagebox.showinfo("Work Time!", "Get back to work.")

            minutes, seconds = divmod(self.work_time if self.is_work_time else self.break_time, 60)
            self.timer_label.configure(text="{:02d}:{:02d}".format(minutes, seconds))
            self.root.after(1000, self.update_timer)

if __name__ == "__main__":
    PomodoroTimer()
